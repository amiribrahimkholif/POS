{"version":3,"file":"default-node_modules_angular_material_fesm2015_slide-toggle_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2015/slide-toggle.mjs"],"sourcesContent":["import * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Inject, Optional, ViewChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false }),\n});\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true,\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\nclass _MatSlideToggleBase extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode, idPrefix) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    ngAfterContentInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._focused = true;\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's ng-touched) will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._focused = false;\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(this._createChangeEvent(this.checked));\n    }\n}\n_MatSlideToggleBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatSlideToggleBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatSlideToggleBase, inputs: { name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { name: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], required: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], toggleChange: [{\n                type: Output\n            }] } });\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleBase {\n    constructor(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode) {\n        super(elementRef, focusMonitor, changeDetectorRef, tabIndex, defaults, animationMode, 'mat-slide-toggle-');\n    }\n    _createChangeEvent(isChecked) {\n        return new MatSlideToggleChange(this, isChecked);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggle, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }, { token: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSlideToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSlideToggle, selector: \"mat-slide-toggle\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.name\": \"null\", \"class.mat-checked\": \"checked\", \"class.mat-disabled\": \"disabled\", \"class.mat-slide-toggle-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_noopAnimations\" }, classAttribute: \"mat-slide-toggle\" }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }], exportAs: [\"matSlideToggle\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"directive\", type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                        'class': 'mat-slide-toggle',\n                        '[id]': 'id',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.name]': 'null',\n                        '[class.mat-checked]': 'checked',\n                        '[class.mat-disabled]': 'disabled',\n                        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                    }, providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <span class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <span class=\\\"mat-slide-toggle-thumb-container\\\">\\n      <span class=\\\"mat-slide-toggle-thumb\\\"></span>\\n      <span class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <span class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></span>\\n      </span>\\n    </span>\\n\\n  </span>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;display:block}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.mat-slide-toggle-input:focus~.mat-slide-toggle-thumb-container .mat-focus-indicator::before{content:\\\"\\\"}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatSlideToggleRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSlideToggleRequiredValidator, selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\", providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatSlideToggleRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] });\n_MatSlideToggleRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSlideToggleRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatSlideToggleRequiredValidator],\n                    declarations: [MatSlideToggleRequiredValidator],\n                }]\n        }] });\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSlideToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, declarations: [MatSlideToggle], imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule], exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule] });\nMatSlideToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, imports: [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSlideToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        _MatSlideToggleRequiredValidatorModule,\n                        MatRippleModule,\n                        MatCommonModule,\n                        ObserversModule,\n                    ],\n                    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n                    declarations: [MatSlideToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleBase, _MatSlideToggleRequiredValidatorModule };\n"],"names":["i3","ObserversModule","i0","InjectionToken","forwardRef","EventEmitter","Directive","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Inject","Optional","ViewChild","NgModule","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","i1","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","_MatSlideToggleMixinBase","_elementRef","_MatSlideToggleBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","animationMode","idPrefix","_onChange","_","_onTouched","_required","_checked","name","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","color","defaultColor","_noopAnimations","id","_uniqueId","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","_focused","Promise","resolve","then","ngOnDestroy","stopMonitoring","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","toggle","_emitChangeEvent","emit","_createChangeEvent","ɵfac","ɵdir","type","ElementRef","FocusMonitor","ChangeDetectorRef","undefined","args","ariaDescribedby","focusMonitor","changeDetectorRef","isChecked","_onChangeEvent","event","stopPropagation","_inputElement","nativeElement","_onInputClick","focus","options","origin","focusVia","_onLabelTextChange","detectChanges","ɵcmp","MatRipple","CdkObserveContent","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","decorators","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatSlideToggleModule","imports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}
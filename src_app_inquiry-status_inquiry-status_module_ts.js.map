{"version":3,"file":"src_app_inquiry-status_inquiry-status_module_ts.js","mappings":"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","sources":["./src/app/inquiry-status/inquiry-status-list-presentation/inquiry-status-list-presentation.component.ts","./src/app/inquiry-status/inquiry-status-list-presentation/inquiry-status-list-presentation.component.html","./src/app/inquiry-status/inquiry-status-list/inquiry-status-list.component.ts","./src/app/inquiry-status/inquiry-status-list/inquiry-status-list.component.html","./src/app/inquiry-status/inquiry-status-routing.module.ts","./src/app/inquiry-status/inquiry-status.module.ts","./src/app/inquiry-status/manage-inquiry-status/manage-inquiry-status.component.ts","./src/app/inquiry-status/manage-inquiry-status/manage-inquiry-status.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CommonDialogService } from '@core/common-dialog/common-dialog.service';\r\nimport { InquiryStatus } from '@core/domain-classes/inquiry-status';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { BaseComponent } from 'src/app/base.component';\r\nimport { ManageInquiryStatusComponent } from '../manage-inquiry-status/manage-inquiry-status.component';\r\n\r\n@Component({\r\n  selector: 'app-inquiry-status-list-presentation',\r\n  templateUrl: './inquiry-status-list-presentation.component.html',\r\n  styleUrls: ['./inquiry-status-list-presentation.component.scss']\r\n})\r\nexport class InquiryStatusListPresentationComponent extends BaseComponent implements OnInit {\r\n\r\n  @Input() inquiryStatuses: InquiryStatus[];\r\n  @Input() loading: boolean = false;\r\n  @Output() deleteInquiryStatusHandler: EventEmitter<string> = new EventEmitter<string>();\r\n  displayedColumns: string[] = ['action', 'name'];\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private commonDialogService: CommonDialogService,\r\n    public translationService: TranslationService\r\n  ) {\r\n    super(translationService);\r\n   \r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  deleteInquiryStatus(inquiryStatus: InquiryStatus): void {\r\n    const areU = this.translationService.getValue('ARE_YOU_SURE_YOU_WANT_TO_DELETE');\r\n    this.sub$.sink = this.commonDialogService.deleteConformationDialog(`${areU} :: ${inquiryStatus.name}`)\r\n      .subscribe(isTrue => {\r\n        if (isTrue) {\r\n          this.deleteInquiryStatusHandler.emit(inquiryStatus.id);\r\n        }\r\n      });\r\n  }\r\n\r\n  manageInquiryStatus(inquiryStatus: InquiryStatus): void {\r\n    this.dialog.open(ManageInquiryStatusComponent, {\r\n      width: '350px',\r\n      direction:this.langDir,\r\n      data: Object.assign({}, inquiryStatus)\r\n    });\r\n  }\r\n}\r\n","<div class=\"page-header-main\">\r\n    <div class=\"row align-items-center justify-content-between\">\r\n        <div class=\"col-md-auto col-sm-auto col\">\r\n            <div class=\"content-header\">\r\n                <h1>{{'INQUIRY_STATUSES' | translate}}</h1>\r\n            </div>\r\n        </div>\r\n        <div *hasClaim=\"'INQ_MANAGE_INQ_STATUS'\"  class=\"col-md-auto col-sm-auto col-auto\">\r\n            <button class=\"btn blue-btn btn-sm m-right-10\" (click)=\"manageInquiryStatus({})\">\r\n                <i class=\"fas fa-plus\"></i>\r\n                {{'ADD_INQUIRY_STATUS' | translate}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"loading-shade\" *ngIf=\"!loading\">\r\n    <mat-spinner></mat-spinner>\r\n</div>\r\n<div class=\"table-responsive\">\r\n    <table mat-table  [dir]=\"langDir\" [dataSource]=\"inquiryStatuses\" class=\"table table-bordered table-hover grid-height\">\r\n        <ng-container matColumnDef=\"action\">\r\n            <th class=\"table-column-200\" mat-header-cell *matHeaderCellDef> {{\"ACTION\" | translate}} </th>\r\n            <td class=\"table-column-200\" mat-cell *matCellDef=\"let element\">\r\n                <button *hasClaim=\"'INQ_MANAGE_INQ_STATUS'\" (click)=\"manageInquiryStatus(element)\" class=\"btn btn-success btn-sm m-right-10\" type=\"button\">\r\n                    <i class=\"fas fa-pencil-alt\"></i>\r\n                    <span class=\"d-none d-sm-inline\"> {{\"EDIT\" | translate}}</span>\r\n                </button>\r\n                <button *hasClaim=\"'INQ_MANAGE_INQ_STATUS'\"  (click)=\"deleteInquiryStatus(element)\" class=\"btn btn-danger btn-sm\" type=\"button\">\r\n                    <i class=\"fas fa-trash-alt\"></i>\r\n                    <span class=\"d-none d-sm-inline\"> {{\"DELETE\" | translate}}</span>\r\n                </button>\r\n            </td>\r\n        </ng-container>\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> {{\"NAME\" | translate}} </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns;sticky: true\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { InquiryStatus } from '@core/domain-classes/inquiry-status';\r\nimport { InquiryStatusService } from '@core/services/inquiry-status.service';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { BaseComponent } from 'src/app/base.component';\r\n\r\n@Component({\r\n  selector: 'app-inquiry-status-list',\r\n  templateUrl: './inquiry-status-list.component.html',\r\n  styleUrls: ['./inquiry-status-list.component.scss']\r\n})\r\nexport class InquiryStatusListComponent extends BaseComponent implements OnInit {\r\n  inquiryStatuses$: Observable<InquiryStatus[]>;\r\n  loading$: Observable<boolean>;\r\n  constructor(\r\n    private inquiryStatusService: InquiryStatusService,\r\n    private toastrService: ToastrService,\r\n    public translationService: TranslationService) {\r\n    super(translationService);\r\n   \r\n  }\r\n  ngOnInit(): void {\r\n\r\n    this.loading$ = this.inquiryStatusService.loaded$\r\n      .pipe(\r\n        tap(loaded => {\r\n          if (!loaded) {\r\n            this.getInquiryStatuses();\r\n          }\r\n        })\r\n      )\r\n    this.inquiryStatuses$ = this.inquiryStatusService.entities$\r\n  }\r\n\r\n  getInquiryStatuses(): void {\r\n    this.inquiryStatusService.getAll();\r\n  }\r\n\r\n  deleteInquiryStatus(id: string): void {\r\n    this.sub$.sink = this.inquiryStatusService.delete(id).subscribe(() => {\r\n      this.toastrService.success(this.translationService.getValue('INQUIRY_STATUS_DELETED_SUCCESSFULLY'));\r\n    });\r\n  }\r\n  // manageInquiryStatus(inquiryStatus: InquiryStatus): void {\r\n  //   if (inquiryStatus.id) {\r\n  //     this.sub$.sink = this.inquiryStatusService.update(inquiryStatus).subscribe(() => {\r\n  //       this.toastrService.success(`Inquiry Status Updated Successfully.`);\r\n  //     });\r\n  //   } else {\r\n  //     this.sub$.sink = this.inquiryStatusService.add(inquiryStatus).subscribe(() => {\r\n  //       this.toastrService.success(`Inquiry Status Saved Successfully.`);\r\n  //     });\r\n  //   }\r\n\r\n  // }\r\n}\r\n","<app-inquiry-status-list-presentation [inquiryStatuses]=\"inquiryStatuses$ | async\" [loading]=\"loading$ | async\"\r\n  (deleteInquiryStatusHandler)=\"deleteInquiryStatus($event)\">\r\n</app-inquiry-status-list-presentation>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from '@core/security/auth.guard';\r\nimport { InquiryStatusListComponent } from './inquiry-status-list/inquiry-status-list.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: InquiryStatusListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { claimType: 'INQ_MANAGE_INQ_STATUS' },\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class InquiryStatusRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InquiryStatusListComponent } from './inquiry-status-list/inquiry-status-list.component';\r\nimport { InquiryStatusListPresentationComponent } from './inquiry-status-list-presentation/inquiry-status-list-presentation.component';\r\nimport { ManageInquiryStatusComponent } from './manage-inquiry-status/manage-inquiry-status.component';\r\nimport { InquiryStatusRoutingModule } from './inquiry-status-routing.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InquiryStatusListComponent,\r\n    InquiryStatusListPresentationComponent,\r\n    ManageInquiryStatusComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    InquiryStatusRoutingModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class InquiryStatusModule { }\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { InquiryStatus } from '@core/domain-classes/inquiry-status';\r\nimport { InquiryStatusService } from '@core/services/inquiry-status.service';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BaseComponent } from 'src/app/base.component';\r\n\r\n@Component({\r\n  selector: 'app-manage-inquiry-status',\r\n  templateUrl: './manage-inquiry-status.component.html',\r\n  styleUrls: ['./manage-inquiry-status.component.scss']\r\n})\r\nexport class ManageInquiryStatusComponent extends BaseComponent implements OnInit {\r\n  isEdit: boolean = false;\r\n  inquiryStatusForm: UntypedFormGroup;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ManageInquiryStatusComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: InquiryStatus,\r\n    private inquiryStatusService: InquiryStatusService,\r\n    private toastrService: ToastrService,\r\n    private fb: UntypedFormBuilder,\r\n    public translationService: TranslationService) {\r\n    super(translationService);\r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n    if (this.data.id) {\r\n      this.inquiryStatusForm.patchValue(this.data);\r\n      this.isEdit = true;\r\n    }\r\n  }\r\n\r\n  createForm() {\r\n    this.inquiryStatusForm = this.fb.group({\r\n      id: [''],\r\n      name: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  saveInquiryStatus(): void {\r\n    if (!this.inquiryStatusForm.valid) {\r\n      this.inquiryStatusForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    const inquiryStatus: InquiryStatus = this.inquiryStatusForm.value;\r\n\r\n    if (this.data.id) {\r\n      this.inquiryStatusService.update(inquiryStatus).subscribe(() => {\r\n        this.toastrService.success(this.translationService.getValue('INQUIRY_STATUS_UPDATED_SUCCESSFULLY'));\r\n        this.dialogRef.close();\r\n      });\r\n    } else {\r\n      this.inquiryStatusService.add(inquiryStatus).subscribe(() => {\r\n        this.toastrService.success(this.translationService.getValue('INQUIRY_STATUS_SAVED_SUCCESSFULLY'));\r\n        this.dialogRef.close();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n","<div class=\"modal-content1\">\r\n    <div class=\"modal-header\">\r\n        <div class=\"d-flex w-100 align-items-center justify-content-between\">\r\n            <div class=\"col-md-9 col\">\r\n                <h4 class=\"modal-title\">\r\n                    {{'MANAGE_INQUIRY_STATUS' | translate}}\r\n                </h4>\r\n            </div>\r\n            <div class=\"col-sm-auto col-auto ml-auto\">\r\n                <button type=\"button\" class=\"close\" (click)=\"onCancel()\" data-dismiss=\"modal\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <form [formGroup]=\"inquiryStatusForm\">\r\n        <div class=\"modal-body\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"form-group\">\r\n                        <label class=\"text-danger\" for=\"inquiryStatusName\">{{'INQUIRY_STATUS_NAME' | translate}}\r\n                            *</label>\r\n                        <input formControlName=\"name\" type=\"text\" class=\"form-control\" id=\"inquiryStatusName\">\r\n                        <div *ngIf=\"inquiryStatusForm.get('name').touched && inquiryStatusForm.get('name').errors\">\r\n                            <div class=\"text-danger\"\r\n                                *ngIf=\"inquiryStatusForm.get('name').touched && inquiryStatusForm.get('name').errors?.required\">\r\n                                {{'INQUIRY_STATUS_NAME_IS_REQUIRED' | translate}}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <div class=\"form-row w-100\">\r\n                <div class=\"col-md-auto col-auto\">\r\n                    <button *hasClaim=\"'INQ_MANAGE_INQ_STATUS'\" class=\"btn btn-success btn-sm m-right-10\"\r\n                        (click)=\"saveInquiryStatus()\" cdkFocusInitial><i class=\"fas fa-save\"></i>\r\n                        {{\"SAVE\" | translate}}\r\n                    </button>\r\n                    <button class=\"btn btn-danger btn-sm\" (click)=\"onCancel()\">\r\n                        <i class=\"fas fa-times-circle\"></i>\r\n                        {{\"CANCEL\" | translate}}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
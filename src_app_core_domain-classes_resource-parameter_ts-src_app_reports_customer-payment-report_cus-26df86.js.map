{"version":3,"file":"src_app_core_domain-classes_resource-parameter_ts-src_app_reports_customer-payment-report_cus-26df86.js","mappings":"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","sources":["./src/app/core/domain-classes/resource-parameter.ts","./src/app/customer/customer.service.ts","./src/app/reports/customer-payment-report/customer-payment-report-routing.module.ts","./src/app/reports/customer-payment-report/customer-payment-report.component.ts","./src/app/reports/customer-payment-report/customer-payment-report.component.html","./src/app/reports/customer-payment-report/customer-payment-report.datasource.ts","./src/app/reports/customer-payment-report/customer-payment-report.module.ts"],"sourcesContent":["export abstract class ResourceParameter {\r\n  fields = '';\r\n  orderBy = '';\r\n  searchQuery = '';\r\n  pageSize = 30;\r\n  skip = 0;\r\n  name = '';\r\n  totalCount = 0;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpResponse, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Guid } from 'guid-typescript';\r\nimport { CustomerResourceParameter } from '@core/domain-classes/customer-resource-parameter';\r\nimport { Customer } from '@core/domain-classes/customer';\r\nimport { CustomerList } from '@core/domain-classes/customer-list';\r\nimport { SupplierPayment } from '@core/domain-classes/supplier-payment';\r\nimport { CustomerPayment } from '@core/domain-classes/customer-payment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomerService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCustomers(\r\n    resourceParams: CustomerResourceParameter\r\n  ): Observable<HttpResponse<Customer[]>> {\r\n    const url = 'customer';\r\n    const customParams = new HttpParams()\r\n      .set('fields', resourceParams.fields)\r\n      .set('orderBy', resourceParams.orderBy)\r\n      .set('pageSize', resourceParams.pageSize.toString())\r\n      .set('skip', resourceParams.skip.toString())\r\n      .set('searchQuery', resourceParams.searchQuery)\r\n      .set('customerName', resourceParams.customerName)\r\n      .set('mobileNo', resourceParams.mobileNo)\r\n      .set('phoneNo', resourceParams.phoneNo)\r\n      .set('email', resourceParams.email)\r\n      .set('contactPerson', resourceParams.contactPerson)\r\n      .set('website', resourceParams.website);\r\n    return this.http.get<Customer[]>(url, {\r\n      params: customParams,\r\n      observe: 'response',\r\n    });\r\n  }\r\n\r\n  getCustomersForDropDown(\r\n    searchBy: string,\r\n    searchString: string\r\n  ): Observable<Customer[]> {\r\n    const url = 'customer/search';\r\n    if (searchString && searchBy) {\r\n      let params = `?searchQuery=${searchString.trim()}&searchBy=${searchBy}&pageSize=10`;\r\n      return this.http.get<Customer[]>(url + params);\r\n    }\r\n    return of([]);\r\n  }\r\n\r\n  getWalkInCustomer() {\r\n    const url = 'customer/walkIn';\r\n    return this.http.get<Customer>(url);\r\n  }\r\n\r\n  getCustomer(id: string): Observable<Customer> {\r\n    const url = 'customer/' + id;\r\n    return this.http.get<Customer>(url);\r\n  }\r\n\r\n  deleteCustomer(id: string): Observable<void> {\r\n    const url = 'customer/' + id;\r\n    return this.http.delete<void>(url);\r\n  }\r\n  updateCustomer(id: string, customer: Customer): Observable<Customer> {\r\n    const url = 'customer/' + id;\r\n    return this.http.put<Customer>(url, customer);\r\n  }\r\n  saveCustomer(customer: Customer): Observable<Customer> {\r\n    const url = 'customer';\r\n    return this.http.post<Customer>(url, customer);\r\n  }\r\n  checkEmailOrPhoneExist(\r\n    email: string,\r\n    mobileNo: string,\r\n    id: string | Guid\r\n  ): Observable<boolean> {\r\n    const url = `customer/${id}/Exist?email=${email}&mobileNo=${mobileNo}`;\r\n    return this.http.get<boolean>(url);\r\n  }\r\n\r\n  getCustomerPayments(\r\n    resourceParams: CustomerResourceParameter\r\n  ): Observable<HttpResponse<CustomerPayment[]>> {\r\n    const url = 'customer/GetCustomerPayment';\r\n    const customParams = new HttpParams()\r\n      .set('Fields', resourceParams.fields)\r\n      .set('OrderBy', resourceParams.orderBy)\r\n      .set('PageSize', resourceParams.pageSize.toString())\r\n      .set('Skip', resourceParams.skip.toString())\r\n      .set('SearchQuery', resourceParams.searchQuery)\r\n      .set('customerName', resourceParams.customerName);\r\n    return this.http.get<CustomerPayment[]>(url, {\r\n      params: customParams,\r\n      observe: 'response',\r\n    });\r\n  }\r\n\r\n  getCustomerPaymentsReport(\r\n    resourceParams: CustomerResourceParameter\r\n  ): Observable<HttpResponse<CustomerPayment[]>> {\r\n    const url = 'customer/GetCustomerPayment/report';\r\n    const customParams = new HttpParams()\r\n      .set('Fields', resourceParams.fields)\r\n      .set('OrderBy', resourceParams.orderBy)\r\n      .set('PageSize', resourceParams.pageSize.toString())\r\n      .set('Skip', resourceParams.skip.toString())\r\n      .set('SearchQuery', resourceParams.searchQuery)\r\n      .set('customerName', resourceParams.customerName);\r\n    return this.http.get<CustomerPayment[]>(url, {\r\n      params: customParams,\r\n      observe: 'response',\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CustomerPaymentReportComponent } from './customer-payment-report.component';\r\nimport { AuthGuard } from '@core/security/auth.guard';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CustomerPaymentReportComponent,\r\n    data: { claimType: 'REP_CUST_PAYMENT_REP' },\r\n    canActivate: [AuthGuard]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CustomerPaymentReportRoutingModule { }\r\n\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { CustomerResourceParameter } from '@core/domain-classes/customer-resource-parameter';\r\nimport { ResponseHeader } from '@core/domain-classes/response-header';\r\nimport { Observable, Subject, merge } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\r\nimport { BaseComponent } from 'src/app/base.component';\r\nimport { CustomerService } from 'src/app/customer/customer.service';\r\nimport { CustomerPaymentReportDataSource } from './customer-payment-report.datasource';\r\nimport * as XLSX from 'xlsx';\r\nimport { CustomerPayment } from '@core/domain-classes/customer-payment';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { UTCToLocalTime } from '@shared/pipes/utc-to-localtime.pipe';\r\nimport { CustomCurrencyPipe } from '@shared/pipes/custome-currency.pipe';\r\n\r\n@Component({\r\n  selector: 'app-customer-payment-report',\r\n  templateUrl: './customer-payment-report.component.html',\r\n  styleUrls: ['./customer-payment-report.component.scss'],\r\n  providers: [UTCToLocalTime, CustomCurrencyPipe]\r\n})\r\nexport class CustomerPaymentReportComponent extends BaseComponent implements OnInit {\r\n  dataSource: CustomerPaymentReportDataSource;\r\n  displayedColumns: string[] = ['customerName', 'totalAmount', 'totalPaidAmount', 'totalPendingAmount'];\r\n  columnsToDisplay: string[] = [\"footer\"];\r\n  isLoadingResults = true;\r\n  customerResource: CustomerResourceParameter;\r\n  loading$: Observable<boolean>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  _nameFilter: string;\r\n  public filterObservable$: Subject<string> = new Subject<string>();\r\n\r\n  public get NameFilter(): string {\r\n    return this._nameFilter;\r\n  }\r\n\r\n  public set NameFilter(v: string) {\r\n    this._nameFilter = v;\r\n    const nameFilter = `customerName##${v}`;\r\n    this.filterObservable$.next(nameFilter);\r\n  }\r\n\r\n  constructor(\r\n    private customerService: CustomerService,\r\n    private translateService: TranslationService,\r\n    private utcToLocalTime: UTCToLocalTime,\r\n    private customCurrencyPipe: CustomCurrencyPipe,public translationService:TranslationService) {\r\n    super(translationService);\r\n    this.getLangDir();\r\n    this.customerResource = new CustomerResourceParameter();\r\n    this.customerResource.pageSize = 10;\r\n    this.customerResource.orderBy = 'customerName asc'\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.dataSource = new CustomerPaymentReportDataSource(this.customerService);\r\n    this.dataSource.loadData(this.customerResource);\r\n    this.getResourceParameter();\r\n    this.sub$.sink = this.filterObservable$\r\n      .pipe(\r\n        debounceTime(1000),\r\n        distinctUntilChanged())\r\n      .subscribe((c) => {\r\n        this.customerResource.skip = 0;\r\n        this.paginator.pageIndex = 0;\r\n        const strArray: Array<string> = c.split('##');\r\n        if (strArray[0] === 'customerName') {\r\n          this.customerResource.customerName = escape(strArray[1]);\r\n        }\r\n        this.dataSource.loadData(this.customerResource);\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\r\n    this.sub$.sink = merge(this.sort.sortChange, this.paginator.page)\r\n      .pipe(\r\n        tap(() => {\r\n          this.customerResource.skip = this.paginator.pageIndex * this.paginator.pageSize;\r\n          this.customerResource.pageSize = this.paginator.pageSize;\r\n          this.customerResource.orderBy = this.sort.active + ' ' + this.sort.direction;\r\n          this.dataSource.loadData(this.customerResource);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  getResourceParameter() {\r\n    this.sub$.sink = this.dataSource.responseHeaderSubject$\r\n      .subscribe((c: ResponseHeader) => {\r\n        if (c) {\r\n          this.customerResource.pageSize = c.pageSize;\r\n          this.customerResource.skip = c.skip;\r\n          this.customerResource.totalCount = c.totalCount;\r\n        }\r\n      });\r\n  }\r\n  onDownloadReport() {\r\n    this.customerService.getCustomerPaymentsReport(this.customerResource)\r\n      .subscribe((c: HttpResponse<CustomerPayment[]>) => {\r\n        let customerPayments = [...c.body];\r\n        let heading = [[this.translateService.getValue('NAME'), this.translateService.getValue('TOTAL_AMOUNT'), this.translateService.getValue('TOTAL_PAID_AMOUNT'), this.translateService.getValue('TOTAL_PENDING_AMOUNT')]];\r\n\r\n        let customerPaymentsReport = [];\r\n        customerPayments.forEach((customerPayment: CustomerPayment) => {\r\n          customerPaymentsReport.push({\r\n            'name': customerPayment.customerName,\r\n            'totalAmount': this.customCurrencyPipe.transform(customerPayment.totalAmount),\r\n            'totalPaidAmount': this.customCurrencyPipe.transform(customerPayment.totalPaidAmount),\r\n            'totalPendingAmount': this.customCurrencyPipe.transform(customerPayment.totalPendingAmount < 0 ? 0 : customerPayment.totalPendingAmount)\r\n          });\r\n        });\r\n\r\n        let workBook = XLSX.utils.book_new();\r\n        XLSX.utils.sheet_add_aoa(workBook, heading);\r\n        let workSheet = XLSX.utils.sheet_add_json(workBook, customerPaymentsReport, { origin: \"A2\", skipHeader: true });\r\n        XLSX.utils.book_append_sheet(workBook, workSheet,this.translationService.getValue('CUSTOMER_PAYMENT_REPORT') );\r\n        XLSX.writeFile(workBook,this.translationService.getValue('CUSTOMER_PAYMENT_REPORT') + \".xlsx\");\r\n      });\r\n  }\r\n}\r\n","<div class=\"page-header-main\">\r\n    <div class=\"row align-items-center justify-content-between\">\r\n        <div class=\"col-md-auto col-sm-auto col\">\r\n            <div class=\"content-header\">\r\n                <h1> {{'CUSTOMER_PAYMENT_REPORT' | translate}} </h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-md-4 mb-4\">\r\n    <button type=\"submit\" (click)=\"onDownloadReport()\" class=\"btn btn-warning btn-sm m-right-10\"><i\r\n      class=\"fas fa-download\"></i> {{'DOWNLOAD_REPORT' | translate}}\r\n    </button>\r\n</div>\r\n</div>\r\n<div class=\"table-responsive\">\r\n    <table class=\"table table-bordered table-hover\"  [dir]=\"langDir\" mat-table [dataSource]=\"dataSource\" multiTemplateDataRows matSort\r\n        matSortActive=\"customerName\">\r\n        <ng-container matColumnDef=\"customerName\" sticky>\r\n            <th class=\"table-column-300\" mat-header-cell *matHeaderCellDef> {{'NAME' | translate}} </th>\r\n            <td class=\"table-column-300\" mat-cell *matCellDef=\"let customer\">\r\n                <a [routerLink]=\"['/customer/',customer.id]\"> {{customer.customerName}} </a>\r\n            </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"totalAmount\">\r\n            <th class=\"table-column-200\" mat-header-cell *matHeaderCellDef> {{'TOTAL_AMOUNT' |\r\n                translate}}\r\n            </th>\r\n            <td class=\"table-column-200\" mat-cell *matCellDef=\"let customer\">\r\n                {{customer.totalAmount | customCurrency}}\r\n            </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"totalPaidAmount\">\r\n            <th class=\"table-column-150\" mat-header-cell *matHeaderCellDef> {{'TOTAL_PAID_AMOUNT' |\r\n                translate}}\r\n            </th>\r\n            <td class=\"table-column-150\" mat-cell *matCellDef=\"let customer\"> {{customer.totalPaidAmount |\r\n                customCurrency}} </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"totalPendingAmount\">\r\n            <th class=\"table-column-150\" mat-header-cell *matHeaderCellDef> {{'TOTAL_PENDING_AMOUNT' | translate}}\r\n            </th>\r\n            <td class=\"table-column-150\" mat-cell *matCellDef=\"let customer\"> {{customer.totalPendingAmount < 0 ? 0 :\r\n                customer.totalPendingAmount| customCurrency}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"customerName-search\" sticky>\r\n            <th mat-header-cell *matHeaderCellDef>\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"NameFilter\">\r\n            </th>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"totalAmount-search\" sticky>\r\n            <th class=\"pr-5\" mat-header-cell *matHeaderCellDef> </th>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"totalPaidAmount-search\" sticky>\r\n            <th class=\"pr-5\" mat-header-cell *matHeaderCellDef> </th>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"totalPendingAmount-search\" sticky>\r\n            <th class=\"pr-5\" mat-header-cell *matHeaderCellDef> </th>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"footer\">\r\n            <td mat-footer-cell colspan=\"4\" *matFooterCellDef>\r\n                <mat-paginator [length]=\"customerResource.totalCount\" [pageSize]=\"customerResource.pageSize\"\r\n                    [pageSizeOptions]=\"[10, 20, 30]\">\r\n                </mat-paginator>\r\n            </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns;sticky: true\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        <tr mat-header-row\r\n            *matHeaderRowDef=\"['customerName-search','totalAmount-search','totalPaidAmount-search','totalPendingAmount-search'];sticky: true\"\r\n            class=\"example-second-header-row\">\r\n        </tr>\r\n        <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay;sticky: true\"></tr>\r\n    </table>\r\n</div>\r\n<div class=\"loading-shade\" *ngIf=\"dataSource.loading$ | async\">\r\n    <mat-spinner></mat-spinner>\r\n</div>\r\n","import { DataSource } from \"@angular/cdk/collections\";\r\nimport { HttpResponse } from \"@angular/common/http\";\r\nimport { CustomerPayment } from \"@core/domain-classes/customer-payment\";\r\nimport { CustomerResourceParameter } from \"@core/domain-classes/customer-resource-parameter\";\r\nimport { ResponseHeader } from \"@core/domain-classes/response-header\";\r\nimport { BehaviorSubject, Subscription, Observable, of } from \"rxjs\";\r\nimport { catchError, finalize } from \"rxjs/operators\";\r\nimport { CustomerService } from \"src/app/customer/customer.service\";\r\n\r\nexport class CustomerPaymentReportDataSource implements DataSource<CustomerPayment> {\r\n    private _customerPaymentSubject$ = new BehaviorSubject<CustomerPayment[]>([]);\r\n    private _responseHeaderSubject$ = new BehaviorSubject<ResponseHeader>(null);\r\n    private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n    public loading$ = this.loadingSubject.asObservable();\r\n    private _count: number = 0;\r\n    sub$: Subscription;\r\n\r\n    public get count(): number {\r\n        return this._count;\r\n    }\r\n    public responseHeaderSubject$ = this._responseHeaderSubject$.asObservable();\r\n\r\n    constructor(private customerService: CustomerService) {\r\n\r\n    }\r\n\r\n    connect(): Observable<CustomerPayment[]> {\r\n        this.sub$ = new Subscription();\r\n        return this._customerPaymentSubject$.asObservable();\r\n    }\r\n\r\n    disconnect(): void {\r\n        this._customerPaymentSubject$.complete();\r\n        this.loadingSubject.complete();\r\n        this.sub$.unsubscribe();\r\n    }\r\n\r\n    loadData(customerResource: CustomerResourceParameter) {\r\n        this.loadingSubject.next(true);\r\n        this.sub$ = this.customerService.getCustomerPayments(customerResource)\r\n            .pipe(\r\n                catchError(() => of([])),\r\n                finalize(() => this.loadingSubject.next(false)))\r\n            .subscribe((resp: HttpResponse<CustomerPayment[]>) => {\r\n                if (resp && resp.headers) {\r\n                    const paginationParam = JSON.parse(\r\n                        resp.headers.get('X-Pagination')\r\n                    ) as ResponseHeader;\r\n                    this._responseHeaderSubject$.next(paginationParam);\r\n                    const customerPayments = [...resp.body];\r\n                    this._count = customerPayments.length;\r\n                    this._customerPaymentSubject$.next(customerPayments);\r\n                }\r\n            });\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerPaymentReportComponent } from './customer-payment-report.component';\nimport { CustomerPaymentReportRoutingModule } from './customer-payment-report-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { SharedModule } from '@shared/shared.module';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n\n\n@NgModule({\n  declarations: [\n    CustomerPaymentReportComponent\n  ],\n  imports: [\n    CommonModule,\n    CustomerPaymentReportRoutingModule,\n    FormsModule,\n    SharedModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class CustomerPaymentReportModule { }\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
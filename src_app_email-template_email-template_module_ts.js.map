{"version":3,"file":"src_app_email-template_email-template_module_ts.js","mappings":"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","sources":["./src/app/email-template/email-template-list/email-template-list.component.ts","./src/app/email-template/email-template-list/email-template-list.component.html","./src/app/email-template/email-template-manage/email-template-manage.component.ts","./src/app/email-template/email-template-manage/email-template-manage.component.html","./src/app/email-template/email-template-routing.module.ts","./src/app/email-template/email-template.module.ts","./src/app/email-template/email-template.resolver.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonDialogService } from '@core/common-dialog/common-dialog.service';\r\nimport { EmailTemplate } from '@core/domain-classes/email-template';\r\nimport { CommonError } from '@core/error-handler/common-error';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BaseComponent } from 'src/app/base.component';\r\nimport { EmailTemplateService } from '../email-template.service';\r\n\r\n@Component({\r\n  selector: 'app-email-template-list',\r\n  templateUrl: './email-template-list.component.html',\r\n  styleUrls: ['./email-template-list.component.scss']\r\n})\r\nexport class EmailTemplateListComponent extends BaseComponent implements OnInit {\r\n\r\n  emailTemplates: EmailTemplate[] = [];\r\n  displayedColumns: string[] = ['action', 'name', 'subject'];\r\n  constructor(\r\n    private emailTemplateService: EmailTemplateService,\r\n    private toastrService: ToastrService,\r\n    private commonDialogService: CommonDialogService,\r\n    public translationService: TranslationService\r\n  ) {\r\n    super(translationService);\r\n    this.getLangDir();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getEmailTemplates();\r\n  }\r\n\r\n  delteEmailTemplate(emailTemplate: EmailTemplate) {\r\n    const areU = this.translationService.getValue('ARE_YOU_SURE_YOU_WANT_TO_DELETE')\r\n    this.sub$.sink = this.commonDialogService\r\n      .deleteConformationDialog(`${areU}:: ${emailTemplate.name}`)\r\n      .subscribe((flag: boolean) => {\r\n        if (flag) {\r\n          this.sub$.sink = this.emailTemplateService.deleteEmailTemplate(emailTemplate)\r\n            .subscribe(() => {\r\n              this.toastrService.success(this.translationService.getValue('EMAIL_TEMPLATE_DELETED_SUCCESSFULLY'));\r\n              this.getEmailTemplates();\r\n            });\r\n        }\r\n      });\r\n  }\r\n\r\n  getEmailTemplates(): void {\r\n    this.sub$.sink = this.emailTemplateService.getEmailTemplates()\r\n      .subscribe((data: EmailTemplate[]) => {\r\n        this.emailTemplates = data;\r\n      }, (err: CommonError) => {\r\n        err.messages.forEach(msg => {\r\n          this.toastrService.error(msg)\r\n        });\r\n      });\r\n  }\r\n\r\n}\r\n","<div class=\"page-header-main\">\r\n  <div class=\"row align-items-center justify-content-between\">\r\n    <div class=\"col-md-auto col-sm-auto\">\r\n      <div class=\"content-header\">\r\n        <h1> {{'EMAIL_TEMPLATE' | translate }}</h1>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-auto col-sm-auto\">\r\n      <a *hasClaim=\"'EMAIL_MANAGE_EMAIL_TEMPLATES'\" class=\"btn blue-btn btn-sm m-right-10\"\r\n        [routerLink]=\"'/emailtemplate/add'\" routerLinkActive=\"router-link-active\" routerLinkActive=\"router-link-active\">\r\n        <i class=\"fas fa-plus\"></i>\r\n        {{'ADD_EMAIL_TEMPLATE' | translate }}\r\n      </a>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"table-responsive\">\r\n  <table mat-table  [dir]=\"langDir\" [dataSource]=\"emailTemplates\" class=\"table table-bordered table-hover\">\r\n    <!-- Action Column -->\r\n    <ng-container matColumnDef=\"action\">\r\n      <th class=\"table-column-300\" mat-header-cell *matHeaderCellDef>\r\n        {{'ACTION' | translate }}\r\n      </th>\r\n      <td class=\"table-column-300\" mat-cell *matCellDef=\"let emailTemplate\">\r\n        <a *hasClaim=\"'EMAIL_MANAGE_EMAIL_TEMPLATES'\" routerLinkActive=\"router-link-active\"\r\n          [routerLink]=\"['/emailtemplate', emailTemplate.id]\" class=\"btn btn-success btn-sm m-right-10\" type=\"button\">\r\n          <i class=\"fas fa-pen\"></i>\r\n          <span class=\"d-none d-sm-inline\"> {{'EDIT' | translate }}</span>\r\n        </a>\r\n        <button *hasClaim=\"'EMAIL_MANAGE_EMAIL_TEMPLATES'\" class=\"btn btn-danger btn-sm\"\r\n          (click)=\"delteEmailTemplate(emailTemplate)\">\r\n          <i class=\"fas fa-trash-alt\"></i>\r\n          <span class=\"d-none d-sm-inline\"> {{'DELETE' | translate }}</span>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n    <!-- Key Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <th class=\"table-column-300\" mat-header-cell *matHeaderCellDef>\r\n        {{'NAME' | translate }}\r\n      </th>\r\n      <td class=\"table-column-300\" mat-cell *matCellDef=\"let emailTemplate\"> {{emailTemplate.name}} </td>\r\n    </ng-container>\r\n    <!-- Value Column -->\r\n    <ng-container matColumnDef=\"subject\">\r\n      <th class=\"table-column-300\" mat-header-cell *matHeaderCellDef>\r\n        {{'SUBJECT' | translate }}\r\n      </th>\r\n      <td class=\"table-column-300\" mat-cell *matCellDef=\"let emailTemplate\"> {{emailTemplate.subject}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns;sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { EmailTemplate } from '@core/domain-classes/email-template';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { EditorConfig } from '@shared/editor.config';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BaseComponent } from 'src/app/base.component';\r\nimport { EmailTemplateService } from '../email-template.service';\r\n\r\n@Component({\r\n  selector: 'app-email-template-manage',\r\n  templateUrl: './email-template-manage.component.html',\r\n  styleUrls: ['./email-template-manage.component.scss']\r\n})\r\nexport class EmailTemplateManageComponent extends BaseComponent implements OnInit {\r\n\r\n  emailTemplateForm: UntypedFormGroup;\r\n  emailTemplate: EmailTemplate;\r\n  editorConfig = EditorConfig;\r\n\r\n  constructor(\r\n    private fb: UntypedFormBuilder,\r\n    private route: ActivatedRoute,\r\n    private emailTemplateService: EmailTemplateService,\r\n    private router: Router,\r\n    private toastrService: ToastrService,\r\n    public translationService: TranslationService\r\n  ) {\r\n    super(translationService);\r\n    this.getLangDir();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createEmailTemplateForm();\r\n    this.getEmailResolverData();\r\n  }\r\n\r\n  getEmailResolverData() {\r\n    this.sub$.sink = this.route.data.subscribe(\r\n      (data: { emailTemplate: EmailTemplate }) => {\r\n        if (data.emailTemplate) {\r\n          this.emailTemplate = data.emailTemplate;\r\n          this.patchEmailTemplateData();\r\n        }\r\n      });\r\n  }\r\n\r\n  addUpdateEmailTemplate() {\r\n    if (this.emailTemplateForm.valid) {\r\n      if (this.emailTemplate) {\r\n        this.sub$.sink = this.emailTemplateService\r\n          .updateEmailTemplate(this.createBuildObject())\r\n          .subscribe(c => {\r\n            this.toastrService.success(this.translationService.getValue('EMAIL_TEMPLATE_UPDATED_SUCCESSFULLY'));\r\n            this.router.navigate(['/emailtemplate']);\r\n          });\r\n      } else {\r\n        this.sub$.sink = this.emailTemplateService\r\n          .addEmailTemplate(this.createBuildObject())\r\n          .subscribe(c => {\r\n            this.toastrService.success(this.translationService.getValue('EMAIL_TEMPLATE_SAVE_SUCCESSFULLY'))\r\n            this.router.navigate(['/emailtemplate']);\r\n          })\r\n      }\r\n    } else {\r\n      for (let inner in this.emailTemplateForm.controls) {\r\n        this.emailTemplateForm.get(inner).markAsDirty();\r\n        this.emailTemplateForm.get(inner).updateValueAndValidity();\r\n      }\r\n    }\r\n  }\r\n\r\n  createBuildObject(): EmailTemplate {\r\n    const emailTemplate: EmailTemplate = {\r\n      id: this.emailTemplate ? this.emailTemplate.id : null,\r\n      name: this.emailTemplateForm.get('name').value,\r\n      subject: this.emailTemplateForm.get('subject').value,\r\n      body: this.emailTemplateForm.get('body').value\r\n    }\r\n    return emailTemplate;\r\n  }\r\n\r\n  createEmailTemplateForm() {\r\n    this.emailTemplateForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      subject: ['', [Validators.required]],\r\n      body: ['', [Validators.required]]\r\n    })\r\n  }\r\n\r\n  patchEmailTemplateData() {\r\n    this.emailTemplateForm.patchValue({\r\n      name: this.emailTemplate.name,\r\n      subject: this.emailTemplate.subject,\r\n      body: this.emailTemplate.body\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"page-header-main\">\r\n  <div class=\"row align-items-center justify-content-between\">\r\n    <div class=\"col-md-auto col-sm-auto\">\r\n      <div class=\"content-header\">\r\n        <h1 *ngIf=\"!emailTemplate\">\r\n          {{'ADD_EMAIL_TEMPLATE' | translate }}\r\n        </h1>\r\n        <h1 *ngIf=\"emailTemplate\">\r\n          {{'EDIT_EMAIL_TEMPLATE' | translate }}\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<form [formGroup]=\"emailTemplateForm\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n      <div class=\"form-group \">\r\n        <label class=\"text-danger\"> {{'NAME' | translate }} *</label>\r\n        <input formControlName=\"name\" class=\"form-control\" type=\"text\">\r\n        <div *ngIf=\"emailTemplateForm.get('name').dirty && emailTemplateForm.get('name').errors\">\r\n          <div class=\"text-danger\" *ngIf=\"emailTemplateForm.get('name').errors?.required\">\r\n            {{'EMAIL_TEMPLATE_NAME_IS_REQUIRED' | translate }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n      <div class=\"form-group \">\r\n        <label class=\"text-danger\">{{'SUBJECT' | translate }} *</label>\r\n        <input formControlName=\"subject\" class=\"form-control\" type=\"text\">\r\n        <div *ngIf=\"emailTemplateForm.get('subject').dirty && emailTemplateForm.get('subject').errors\">\r\n          <div class=\"text-danger\" *ngIf=\"emailTemplateForm.get('subject').errors?.required\">\r\n            {{'SUBJECT_IS_REQUIRED' | translate }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n      <div class=\"form-group \">\r\n        <label class=\"text-danger\">\r\n          {{'BODY' | translate }} *\r\n          <span class=\"text-danger\">\r\n            {{'WORD_MUST_BE_START_AND_END_WITH' | translate }}\r\n          </span>\r\n        </label>\r\n        <angular-editor formControlName=\"body\" [config]=\"editorConfig\"></angular-editor>\r\n        <div *ngIf=\"emailTemplateForm.get('body').dirty && emailTemplateForm.get('body').errors\">\r\n          <div class=\"text-danger\" *ngIf=\"emailTemplateForm.get('body').errors?.required\">\r\n            {{'BODY_IS_REQUIRED' | translate }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"mt-2 col-md-12\">\r\n      <button *hasClaim=\"'EMAIL_MANAGE_EMAIL_TEMPLATES'\" class=\"btn btn-success btn-sm m-right-10\"\r\n        (click)=\"addUpdateEmailTemplate()\" cdkFocusInitial><i class=\"las la-save\"></i>\r\n        {{'SAVE' | translate }}\r\n      </button>\r\n      <button type=\"button\" class=\"btn btn-danger btn-sm\" [routerLink]=\"['/emailtemplate']\">\r\n        <i class=\"las la-times-circle\"></i>\r\n        {{'CANCEL' | translate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from '@core/security/auth.guard';\r\nimport { EmailTemplateListComponent } from './email-template-list/email-template-list.component';\r\nimport { EmailTemplateManageComponent } from './email-template-manage/email-template-manage.component';\r\nimport { EmailTemplateResolver } from './email-template.resolver';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmailTemplateListComponent,\r\n    data: { claimType: 'EMAIL_MANAGE_EMAIL_TEMPLATES' },\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: ':id',\r\n    component: EmailTemplateManageComponent,\r\n    resolve: { emailTemplate: EmailTemplateResolver },\r\n    data: { claimType: ['EMAIL_MANAGE_EMAIL_TEMPLATES', 'EMAIL_MANAGE_EMAIL_TEMPLATES'] },\r\n    canActivate: [AuthGuard]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EmailTemplateRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EmailTemplateRoutingModule } from './email-template-routing.module';\r\nimport { EmailTemplateManageComponent } from './email-template-manage/email-template-manage.component';\r\nimport { EmailTemplateListComponent } from './email-template-list/email-template-list.component';\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { AngularEditorModule } from '@kolkov/angular-editor';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EmailTemplateManageComponent,\r\n    EmailTemplateListComponent],\r\n  imports: [\r\n    CommonModule,\r\n    EmailTemplateRoutingModule,\r\n    AngularEditorModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule\r\n  ]\r\n})\r\nexport class EmailTemplateModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Resolve,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { EmailTemplate } from '@core/domain-classes/email-template';\r\nimport { Observable } from 'rxjs';\r\nimport { EmailTemplateService } from './email-template.service';\r\n\r\n@Injectable(\r\n  {\r\n    providedIn: 'root'\r\n  }\r\n)\r\nexport class EmailTemplateResolver implements Resolve<EmailTemplate> {\r\n  constructor(private emailTemplateService: EmailTemplateService) { }\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<EmailTemplate> {\r\n    const id = route.paramMap.get('id');\r\n    if (id === 'add') {\r\n      return null;\r\n    }\r\n    return this.emailTemplateService.getEmailTemplate(id) as Observable<EmailTemplate>;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
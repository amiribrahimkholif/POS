{"version":3,"file":"default-src_app_core_domain-classes_product-resource-parameter_ts-src_app_product_product_ser-243fd0.js","mappings":"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","sources":["./src/app/core/domain-classes/product-resource-parameter.ts","./src/app/product/product.service.ts","./src/app/purchase-order/add-purchase-order-payments/add-purchase-order-payments.component.ts","./src/app/purchase-order/add-purchase-order-payments/add-purchase-order-payments.component.html","./src/app/purchase-order/purchase-order-payment.service.ts","./src/app/purchase-order/view-purchase-order-payment/view-purchase-order-payment.component.ts","./src/app/purchase-order/view-purchase-order-payment/view-purchase-order-payment.component.html"],"sourcesContent":["import { ResourceParameter } from \"./resource-parameter\";\r\nexport class ProductResourceParameter extends ResourceParameter {\r\n    name: string = '';\r\n    unitId?: string = '';\r\n    barcode?:string ='';\r\n    categoryId?: string = '';\r\n    brandId?: string = '';\r\n    id?: string='';\r\n}\r\n","import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Product } from '@core/domain-classes/product';\r\nimport { ProductResourceParameter } from '@core/domain-classes/product-resource-parameter';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProducts(\r\n    resourceParams: ProductResourceParameter\r\n  ): Observable<HttpResponse<Product[]>> {\r\n    const url = 'product';\r\n    const customParams = new HttpParams()\r\n      .set('fields', resourceParams.fields)\r\n      .set('orderBy', resourceParams.orderBy)\r\n      .set('pageSize', resourceParams.pageSize.toString())\r\n      .set('skip', resourceParams.skip.toString())\r\n      .set('searchQuery', resourceParams.searchQuery)\r\n      .set('name', resourceParams.name)\r\n      .set('id', resourceParams.id)\r\n      .set('categoryId', resourceParams.categoryId ? resourceParams.categoryId : '')\r\n      .set('unitId', resourceParams.unitId ? resourceParams.unitId : '')\r\n      .set('barcode', resourceParams.barcode ? resourceParams.barcode : '')\r\n      .set('brandId', resourceParams.brandId ? resourceParams.brandId : resourceParams.brandId);\r\n    return this.http.get<Product[]>(url, {\r\n      params: customParams,\r\n      observe: 'response',\r\n    });\r\n  }\r\n\r\n  getProudct(id: string): Observable<Product> {\r\n    const url = `product/${id}`;\r\n    return this.http.get<Product>(url);\r\n  }\r\n\r\n  addProudct(product: Product): Observable<Product> {\r\n    const url = 'product';\r\n    return this.http.post<Product>(url, product);\r\n  }\r\n\r\n  updateProudct(id: string, product: Product): Observable<Product> {\r\n    const url = `product/${id}`;\r\n    return this.http.put<Product>(url, product);\r\n  }\r\n\r\n\r\n  deleteProudct(id: string): Observable<void> {\r\n    const url = `product/${id}`;\r\n    return this.http.delete<void>(url);\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { PaymentMethod } from '@core/domain-classes/payment-method';\r\nimport { PurchaseOrder } from '@core/domain-classes/purchase-order';\r\nimport { PurchaseOrderPayment } from '@core/domain-classes/purchase-order-payment';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BaseComponent } from 'src/app/base.component';\r\nimport { PurchaseOrderPaymentService } from '../purchase-order-payment.service';\r\n\r\n@Component({\r\n  selector: 'app-add-purchase-order-payments',\r\n  templateUrl: './add-purchase-order-payments.component.html',\r\n  styleUrls: ['./add-purchase-order-payments.component.scss']\r\n})\r\nexport class AddPurchaseOrderPaymentsComponent extends BaseComponent implements OnInit {\r\n  paymentMethodslist: PaymentMethod[] = [];\r\n  paymentsForm: UntypedFormGroup;\r\n  isReceiptDeleted = false;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddPurchaseOrderPaymentsComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: PurchaseOrder,\r\n    private purchaseOrderPaymentService: PurchaseOrderPaymentService,\r\n    private toastrService: ToastrService,\r\n    private fb: UntypedFormBuilder,\r\n    public translationService: TranslationService) {\r\n    super(translationService);\r\n    this.getLangDir();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n    this.paymentMethodsList();\r\n    if (this.data.id) {\r\n      this.paymentsForm.get('amount').setValue((this.data.totalAmount - this.data.totalPaidAmount));\r\n      this.paymentsForm.get('purchaseOrderId').setValue(this.data.id);\r\n    }\r\n  }\r\n\r\n  createForm() {\r\n    this.paymentsForm = this.fb.group({\r\n      id: [''],\r\n      purchaseOrderId: [''],\r\n      paymentDate: [new Date(), [Validators.required]],\r\n      referenceNumber: [''],\r\n      amount: ['', Validators.required],\r\n      note: [''],\r\n      paymentMethod: [0, Validators.required],\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  fileEvent($event) {\r\n    this.isReceiptDeleted = true;\r\n    let files: File[] = $event.target.files;\r\n    if (files.length == 0) {\r\n      return;\r\n    }\r\n    const file = files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (_event) => {\r\n      this.paymentsForm.get('attachmentData').setValue(reader.result.toString());\r\n    }\r\n  }\r\n\r\n  paymentMethodsList() {\r\n    this.sub$.sink = this.purchaseOrderPaymentService.getPaymentMethod()\r\n      .subscribe(f => this.paymentMethodslist = [...f]);\r\n  }\r\n\r\n  savePurchaseOrderPayment(): void {\r\n    if (!this.paymentsForm.valid) {\r\n      this.paymentsForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    const purchaseOrderpayment: PurchaseOrderPayment = this.paymentsForm.value;\r\n    if (this.data.id) {\r\n      this.purchaseOrderPaymentService.addPurchaseOrderPayments(purchaseOrderpayment).subscribe(() => {\r\n        this.toastrService.success(this.translationService.getValue('PAYMENT_ADD_SUCCESSFULLY'));\r\n        this.dialogRef.close(true);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"modal-content1\">\r\n    <div class=\"modal-header\">\r\n        <div class=\"d-flex w-100 align-items-center justify-content-between\">\r\n            <div class=\"col-md-9 col\">\r\n                <h4 class=\"modal-title\">\r\n                    {{'ADD_PAYMENT' | translate }}\r\n                </h4>\r\n            </div>\r\n            <div class=\"col-sm-auto col-auto ml-auto\">\r\n                <button type=\"button\" class=\"close\" (click)=\"onCancel()\" data-dismiss=\"modal\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <form [formGroup]=\"paymentsForm\">\r\n        <div class=\"modal-body\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"text-danger\" for=\"paymentDate\">{{'PAYMENT_DATE' | translate}} *</label>\r\n                                <input class=\"form-control\" id=\"paymentDate\" formControlName=\"paymentDate\"\r\n                                    [owlDateTimeTrigger]=\"paymentDate\" [owlDateTime]=\"paymentDate\"\r\n                                    placeholder=\"PaymentDate\">\r\n                                <div\r\n                                    *ngIf=\"paymentsForm.get('paymentDate').touched && paymentsForm.get('paymentDate').errors\">\r\n                                    <div class=\"text-danger\" *ngIf=\"paymentsForm.get('paymentDate').errors?.required\">\r\n                                        {{'PAYMENT_DATE_IS_REQUIRED' | translate }}\r\n                                    </div>\r\n                                </div>\r\n                                <owl-date-time [pickerType]=\"'calendar'\" #paymentDate></owl-date-time>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"referenceNumber\"> {{'REFERENCE_NUMBER' | translate}}</label>\r\n                                <input formControlName=\"referenceNumber\" type=\"text\" class=\"form-control\"\r\n                                    id=\"referenceNumber\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"text-danger\">{{'AMOUNT' | translate}}</label>\r\n                                <input formControlName=\"amount\" type=\"text\" class=\"form-control\">\r\n                                <div *ngIf=\"paymentsForm.get('amount').errors?.required\">\r\n                                    <div class=\"text-danger\">\r\n                                        {{'AMOUNT_IS_REQUIRED' | translate}}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"text-danger\" for=\"paymentMethod\"> {{'PAYING_BY' | translate}} *</label>\r\n                                <mat-select [dir]=\"langDir\" placeholder=\"Select Paying by\" class=\"form-control\"\r\n                                    formControlName=\"paymentMethod\">\r\n                                    <mat-option [dir]=\"langDir\" *ngFor=\"let paymentMethod of paymentMethodslist\"\r\n                                        [value]=\"paymentMethod?.id\">\r\n                                        {{paymentMethod?.id | paymentmethod}}\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                                <div\r\n                                    *ngIf=\"paymentsForm.get('paymentMethod').touched && paymentsForm.get('paymentMethod').errors\">\r\n                                    <div *ngIf=\"paymentsForm.get('paymentMethod').errors?.required\">\r\n                                        <div class=\"text-danger\">\r\n                                            {{'PAYMENT_METHOD_IS_REQUIRED' | translate}}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"form-group \">\r\n                        <label>\r\n                            {{'NOTE' | translate}}\r\n                        </label>\r\n                        <div class=\"input-group\">\r\n                            <textarea formControlName=\"note\" class=\"form-control w-100\">\r\n                            </textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <div class=\"form-row w-100\">\r\n                <div class=\"col-md-auto col-auto\">\r\n                    <button *hasClaim=\"'PO_ADD_PO_PAYMENT'\" class=\"btn btn-success btn-sm m-right-10\"\r\n                        (click)=\"savePurchaseOrderPayment()\" cdkFocusInitial><i class=\"fas fa-save\"></i>\r\n                        {{\"SAVE\" | translate}}\r\n                    </button>\r\n                    <button class=\"btn btn-danger btn-sm\" (click)=\"onCancel()\">\r\n                        <i class=\"fas fa-times-circle\"></i>\r\n                        {{\"CANCEL\" | translate}}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { PaymentMethod, paymentMethods } from '@core/domain-classes/payment-method';\r\nimport { PurchaseOrderPayment } from '@core/domain-classes/purchase-order-payment';\r\nimport { CommonError } from '@core/error-handler/common-error';\r\nimport { CommonHttpErrorService } from '@core/error-handler/common-http-error.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PurchaseOrderPaymentService {\r\n\r\n  constructor(private http: HttpClient,\r\n    private commonHttpErrorService: CommonHttpErrorService) { }\r\n\r\n  getAllPurchaseOrderPaymentById(id: string): Observable<any> {\r\n    const url = `PurchaseOrderPayment/${id}`;\r\n    return this.http.get<PurchaseOrderPayment>(url)\r\n      .pipe(catchError(this.commonHttpErrorService.handleError));\r\n  }\r\n\r\n  addPurchaseOrderPayments(purchaseOrderPayment: PurchaseOrderPayment): Observable<PurchaseOrderPayment | CommonError> {\r\n    const url = `PurchaseOrderPayment`;\r\n    return this.http.post<PurchaseOrderPayment>(url, purchaseOrderPayment)\r\n      .pipe(catchError(this.commonHttpErrorService.handleError));\r\n  }\r\n\r\n  getPaymentMethod(): Observable<PaymentMethod[]> {\r\n    return of(paymentMethods);\r\n  }\r\n\r\n deletePurchaseOrderPayment(id): Observable<void | CommonError> {\r\n    const url = `PurchaseOrderPayment/${id}`;\r\n    return this.http.delete<void>(url)\r\n      .pipe(catchError(this.commonHttpErrorService.handleError));\r\n  }\r\n\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { CommonDialogService } from '@core/common-dialog/common-dialog.service';\r\nimport { PurchaseOrder } from '@core/domain-classes/purchase-order';\r\nimport { PurchaseOrderPayment } from '@core/domain-classes/purchase-order-payment';\r\nimport { TranslationService } from '@core/services/translation.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BaseComponent } from 'src/app/base.component';\r\nimport { PurchaseOrderPaymentService } from '../purchase-order-payment.service';\r\n\r\n@Component({\r\n  selector: 'app-view-purchase-order-payment',\r\n  templateUrl: './view-purchase-order-payment.component.html',\r\n  styleUrls: ['./view-purchase-order-payment.component.scss']\r\n})\r\nexport class ViewPurchaseOrderPaymentComponent extends BaseComponent implements OnInit {\r\n  dataSource = new MatTableDataSource<PurchaseOrderPayment>();\r\n  isData: boolean = false;\r\n  isDeleted = false;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ViewPurchaseOrderPaymentComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: PurchaseOrder,\r\n    private purchaseOrderPaymentService: PurchaseOrderPaymentService,\r\n    private toastrService: ToastrService,\r\n    private commonDialogService: CommonDialogService,\r\n    public translationService: TranslationService) {\r\n    super(translationService);\r\n    this.getLangDir();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.data.id) {\r\n      this.getAllPurchaseOrderPaymentById();\r\n    }\r\n  }\r\n\r\n  displayedColumns: string[] = ['action', 'paymentDate', 'referenceNumber', 'amount', 'paymentMethod'];\r\n  footerToDisplayed = ['footer']\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close(this.isDeleted);\r\n  }\r\n\r\n  getAllPurchaseOrderPaymentById() {\r\n    this.purchaseOrderPaymentService.getAllPurchaseOrderPaymentById(this.data.id).subscribe(data => {\r\n      this.dataSource = data;\r\n      if (data.length == 0) {\r\n        this.isData = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  deletePayment(payment: PurchaseOrderPayment) {\r\n    this.sub$.sink = this.commonDialogService\r\n      .deleteConformationDialog(`${this.translationService.getValue('ARE_YOU_SURE_YOU_WANT_TO_DELETE')} ${payment.amount}`)\r\n      .subscribe((isTrue: boolean) => {\r\n        if (isTrue) {\r\n          this.sub$.sink = this.purchaseOrderPaymentService.deletePurchaseOrderPayment(payment.id)\r\n            .subscribe(() => {\r\n              this.isDeleted = true;\r\n              this.toastrService.success('Payment is deleted.');\r\n              this.getAllPurchaseOrderPaymentById();\r\n            });\r\n        }\r\n      });\r\n  }\r\n\r\n}\r\n","<div class=\"modal-content1\">\r\n    <div class=\"modal-header\">\r\n        <div class=\"d-flex w-100 align-items-center justify-content-between\">\r\n            <div class=\"col-md-9 col\">\r\n                <h4 class=\"modal-title\">\r\n                    {{'VIEW_PAYMENT' | translate}} ({{this.data.orderNumber}})\r\n                </h4>\r\n            </div>\r\n            <div class=\"col-sm-auto col-auto ml-auto\">\r\n                <button type=\"button\" class=\"close\" (click)=\"onCancel()\" data-dismiss=\"modal\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"table-responsive\">\r\n            <table [dir]=\"langDir\" mat-table [dataSource]=\"dataSource\" class=\"table table-bordered table-hover\">\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef> {{\"ACTION\" | translate}} </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <button *hasClaim=\"'PO_DELETE_PO_PAYMENT'\" (click)=\"deletePayment(element)\" class=\"btn btn-danger btn-sm\" type=\"button\">\r\n                            <i class=\"fas fa-trash-alt\"></i>\r\n                        </button>\r\n                    </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"paymentDate\">\r\n                    <th mat-header-cell *matHeaderCellDef> {{'PAYMENT_DATE' | translate}} </th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.paymentDate | utcToLocalTime:'shortDate'}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"referenceNumber\">\r\n                    <th mat-header-cell *matHeaderCellDef> {{'REFERENCE_NUMBER' | translate}} </th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.referenceNumber}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"amount\">\r\n                    <th mat-header-cell *matHeaderCellDef> {{'AMOUNT' | translate}} </th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.amount | customCurrency}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"paymentMethod\">\r\n                    <th mat-header-cell *matHeaderCellDef> {{'PAID_BY' | translate }}</th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.paymentMethod | paymentmethod }} </td>\r\n                </ng-container>\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns;sticky: true\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n            <ng-container *ngIf=\"isData\">\r\n                <div class=\"col-sm-12\">\r\n                    <label class=\"font-weight-bold\"> {{'NO_DATA_FOUND' | translate}}</label>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}